import pytest

<<<<<<< HEAD
import pandas as pd
import pandas.util.testing as tm


class TestCategoricalWarnings:
    def test_tab_complete_warning(self, ip):
=======
from pandas.util._test_decorators import async_mark

import pandas._testing as tm


class TestCategoricalWarnings:
    @async_mark()
    async def test_tab_complete_warning(self, ip):
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
        # https://github.com/pandas-dev/pandas/issues/16409
        pytest.importorskip("IPython", minversion="6.0.0")
        from IPython.core.completer import provisionalcompleter

        code = "import pandas as pd; c = Categorical([])"
<<<<<<< HEAD
        ip.run_code(code)
        with tm.assert_produces_warning(None):
            with provisionalcompleter("ignore"):
                list(ip.Completer.completions("c.", 1))

    def test_CategoricalAccessor_categorical_deprecation(self):
        with tm.assert_produces_warning(FutureWarning):
            pd.Series(["a", "b"], dtype="category").cat.categorical

    def test_CategoricalAccessor_name_deprecation(self):
        with tm.assert_produces_warning(FutureWarning):
            pd.Series(["a", "b"], dtype="category").cat.name

    def test_CategoricalAccessor_index_deprecation(self):
        with tm.assert_produces_warning(FutureWarning):
            pd.Series(["a", "b"], dtype="category").cat.index
=======
        await ip.run_code(code)

        # GH 31324 newer jedi version raises Deprecation warning
        import jedi

        if jedi.__version__ < "0.16.0":
            warning = tm.assert_produces_warning(None)
        else:
            warning = tm.assert_produces_warning(
                DeprecationWarning, check_stacklevel=False
            )
        with warning:
            with provisionalcompleter("ignore"):
                list(ip.Completer.completions("c.", 1))
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
