<<<<<<< HEAD
from collections import ChainMap


class DeepChainMap(ChainMap):
    def __setitem__(self, key, value):
        for mapping in self.maps:
            if key in mapping:
                mapping[key] = value
                return
        self.maps[0][key] = value

    def __delitem__(self, key):
        for mapping in self.maps:
            if key in mapping:
                del mapping[key]
                return
        raise KeyError(key)

    # override because the m parameter is introduced in Python 3.4
    def new_child(self, m=None):
        if m is None:
            m = {}
        return self.__class__(m, *self.maps)
=======
from typing import ChainMap, MutableMapping, TypeVar, cast

_KT = TypeVar("_KT")
_VT = TypeVar("_VT")


class DeepChainMap(ChainMap[_KT, _VT]):
    """Variant of ChainMap that allows direct updates to inner scopes.

    Only works when all passed mapping are mutable.
    """

    def __setitem__(self, key: _KT, value: _VT) -> None:
        for mapping in self.maps:
            mutable_mapping = cast(MutableMapping[_KT, _VT], mapping)
            if key in mutable_mapping:
                mutable_mapping[key] = value
                return
        cast(MutableMapping[_KT, _VT], self.maps[0])[key] = value

    def __delitem__(self, key: _KT) -> None:
        """
        Raises
        ------
        KeyError
            If `key` doesn't exist.
        """
        for mapping in self.maps:
            mutable_mapping = cast(MutableMapping[_KT, _VT], mapping)
            if key in mapping:
                del mutable_mapping[key]
                return
        raise KeyError(key)
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
