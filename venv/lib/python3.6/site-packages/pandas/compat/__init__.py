"""
compat
======

Cross-compatible functions for different versions of Python.

Other items:
* platform checker
"""
import platform
import struct
import sys
import warnings

<<<<<<< HEAD
PY35 = sys.version_info[:2] == (3, 5)
PY36 = sys.version_info >= (3, 6)
=======
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
PY37 = sys.version_info >= (3, 7)
PY38 = sys.version_info >= (3, 8)
PYPY = platform.python_implementation() == "PyPy"


# ----------------------------------------------------------------------------
# functions largely based / taken from the six module

# Much of the code in this module comes from Benjamin Peterson's six library.
# The license for this library can be found in LICENSES/SIX and the code can be
# found at https://bitbucket.org/gutworth/six


def set_function_name(f, name, cls):
    """
<<<<<<< HEAD
    Bind the name/qualname attributes of the function
    """
    f.__name__ = name
    f.__qualname__ = "{klass}.{name}".format(klass=cls.__name__, name=name)
=======
    Bind the name/qualname attributes of the function.
    """
    f.__name__ = name
    f.__qualname__ = f"{cls.__name__}.{name}"
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
    f.__module__ = cls.__module__
    return f


<<<<<<< HEAD
def raise_with_traceback(exc, traceback=Ellipsis):
    """
    Raise exception with existing traceback.
    If traceback is not passed, uses sys.exc_info() to get traceback.
    """
    if traceback == Ellipsis:
        _, _, traceback = sys.exc_info()
    raise exc.with_traceback(traceback)


# https://github.com/pandas-dev/pandas/pull/9123
def is_platform_little_endian():
    """ am I little endian """
    return sys.byteorder == "little"


def is_platform_windows():
    return sys.platform == "win32" or sys.platform == "cygwin"


def is_platform_linux():
    return sys.platform == "linux2"


def is_platform_mac():
    return sys.platform == "darwin"


def is_platform_32bit():
=======
# https://github.com/pandas-dev/pandas/pull/9123
def is_platform_little_endian() -> bool:
    """
    Checking if the running platform is little endian.

    Returns
    -------
    bool
        True if the running platform is little endian.
    """
    return sys.byteorder == "little"


def is_platform_windows() -> bool:
    """
    Checking if the running platform is windows.

    Returns
    -------
    bool
        True if the running platform is windows.
    """
    return sys.platform == "win32" or sys.platform == "cygwin"


def is_platform_linux() -> bool:
    """
    Checking if the running platform is linux.

    Returns
    -------
    bool
        True if the running platform is linux.
    """
    return sys.platform == "linux2"


def is_platform_mac() -> bool:
    """
    Checking if the running platform is mac.

    Returns
    -------
    bool
        True if the running platform is mac.
    """
    return sys.platform == "darwin"


def is_platform_32bit() -> bool:
    """
    Checking if the running platform is 32-bit.

    Returns
    -------
    bool
        True if the running platform is 32-bit.
    """
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
    return struct.calcsize("P") * 8 < 64


def _import_lzma():
<<<<<<< HEAD
    """Attempts to import lzma, warning the user when lzma is not available.
=======
    """
    Importing the `lzma` module.

    Warns
    -----
    When the `lzma` module is not available.
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
    """
    try:
        import lzma

        return lzma
    except ImportError:
        msg = (
            "Could not import the lzma module. "
            "Your installed Python is incomplete. "
            "Attempting to use lzma compression will result in a RuntimeError."
        )
        warnings.warn(msg)


def _get_lzma_file(lzma):
<<<<<<< HEAD
    """Returns the lzma method LZMAFile when the module was correctly imported.
    Otherwise, raises a RuntimeError.
=======
    """
    Importing the `LZMAFile` class from the `lzma` module.

    Returns
    -------
    class
        The `LZMAFile` class from the `lzma` module.

    Raises
    ------
    RuntimeError
        If the `lzma` module was not imported correctly, or didn't exist.
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
    """
    if lzma is None:
        raise RuntimeError(
            "lzma module not available. "
<<<<<<< HEAD
            "A Python re-install with the proper "
            "dependencies might be required to solve this issue."
=======
            "A Python re-install with the proper dependencies, "
            "might be required to solve this issue."
>>>>>>> 08cf566694c2c63d615f5d40137fa82e6bddcc6f
        )
    return lzma.LZMAFile
